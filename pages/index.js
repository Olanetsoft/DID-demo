// Import the Head component from the "next/head" module.
import Head from "next/head";

// Import the useViewerConnection and useViewerRecord hooks from the "@self.id/react" library.
import { useViewerConnection, useViewerRecord } from "@self.id/react";

// Import the EthereumAuthProvider component from the "@self.id/web" library.
import { EthereumAuthProvider } from "@self.id/web";

// Import the toast and Toaster components from the "react-hot-toast" library.
import { Toaster, toast } from "react-hot-toast";

// Import the useState hook from the "react" module.
import { useEffect, useState } from "react";

export default function Home() {
  // Sets up the state variables for name, username, and bio.
  const [name, setName] = useState("");
  const [username, setUsername] = useState("");
  const [bio, setBio] = useState("");

  // Calls the useViewerConnection hook to get the connection status, connect and disconnect functions.
  const [connection, connect, disconnect] = useViewerConnection();

  // Sets up the isWindow state variable to null using useState.
  const [isWindow, setIsWindow] = useState(null);

  // Calls the useViewerRecord hook to get the ceramic record for the user's basic profile.
  const record = useViewerRecord("basicProfile");

  // Creates a new authentication provider using the ethereum account.
  async function createAuthProvider() {
    // The following assumes there is an injected `window.ethereum` provider
    const addresses = await window.ethereum.request({
      method: "eth_requestAccounts",
    });
    return new EthereumAuthProvider(window.ethereum, addresses[0]);
  }

  // Connects the user's wallet to the website using the connect function and the created authentication provider.
  async function connectAccount() {
    const authProvider = await createAuthProvider();
    connect(authProvider);
  }

  // Handles the form submission and updates the user's profile on the ceramic database.
  const handleSubmit = async (event) => {
    event.preventDefault();
    if (!name && !username && !bio) {
      toast.error("Please fill out all fields");
      return;
    }

    await record.merge({
      name,
      bio,
      username,
    });
    toast.success("Profile updated");
  };

  // Sets the isWindow variable to the window object if it exists.
  useEffect(() => {
    if (typeof window !== "undefined") {
      setIsWindow(window);
    }
  }, [record]);

  return (
    <>
      <Head>
        <title>Decentralized Identity Demo</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className="min-h-screen bg-gray-100">
        <nav className="bg-white shadow">
          <div className="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8">
            <div className="flex justify-between h-16">
              <div className="flex">
                <div className="flex-shrink-0 flex items-center">
                  <h3 className="text-2xl font-bold text-gray-900">
                    Decentralized Identity
                  </h3>
                </div>
              </div>
              <div className="flex items-center">
                {connection.status === "connected" ? (
                  <button
                    onClick={() => disconnect()}
                    className="inline-flex items-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-red-500 hover:bg-red-600 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500"
                  >
                    Disconnect
                  </button>
                ) : isWindow && "ethereum" in window ? (
                  <button
                    onClick={() => connectAccount()}
                    className="inline-flex items-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-blue-500 hover:bg-blue-600 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
                  >
                    Connect Wallet
                  </button>
                ) : (
                  <p className="text-red-500 text-sm italic mt-2 text-center w-full">
                    An injected Ethereum provider such as{" "}
                    <a href="https://metamask.io/">MetaMask</a> is needed to
                    authenticate.
                  </p>
                )}
              </div>
            </div>
          </div>
        </nav>

        <main className="py-10">
          <div className="max-w-3xl mx-auto sm:px-6 lg:px-8">
            <div className="bg-white overflow-hidden shadow sm:rounded-lg px-4 py-5 sm:p-6">
              <div className="px-4 py-5 sm:p-6 bg-white">
                <form onSubmit={handleSubmit} noValidate>
                  <div className="space-y-4">
                    <div>
                      <label
                        htmlFor="name"
                        className="block text-sm font-bold text-gray-700"
                      >
                        Name
                      </label>
                      <div className="mt-1">
                        <input
                          type="text"
                          name="name"
                          id="name"
                          value={name}
                          onChange={(event) => setName(event.target.value)}
                          className="block w-full px-4 py-3 rounded-md shadow-sm placeholder-gray-500 focus:ring-gray-500 focus:border-gray-500 border border-gray-300 focus:outline-none "
                          placeholder="John Doe"
                        />
                      </div>
                    </div>
                    <div>
                      <label
                        htmlFor="username"
                        className="block text-sm font-bold text-gray-700"
                      >
                        Username
                      </label>
                      <div className="mt-1">
                        <input
                          type="text"
                          name="username"
                          id="username"
                          value={username}
                          onChange={(event) => setUsername(event.target.value)}
                          className="block w-full px-4 py-3 rounded-md shadow-sm placeholder-gray-500 focus:ring-gray-500 focus:border-gray-500 border border-gray-300 focus:outline-none "
                          placeholder="johndoe"
                        />
                      </div>
                    </div>
                    <div>
                      <label
                        htmlFor="bio"
                        className="block text-sm font-bold text-gray-700"
                      >
                        Bio
                      </label>
                      <div className="mt-1">
                        <textarea
                          name="bio"
                          id="bio"
                          value={bio}
                          onChange={(event) => setBio(event.target.value)}
                          className="block w-full px-4 py-3 rounded-md shadow-sm placeholder-gray-500 focus:ring-gray-500 focus:border-gray-500 border border-gray-300 focus:outline-none "
                          rows="3"
                          placeholder="Tell us a little about yourself..."
                        ></textarea>
                      </div>
                    </div>
                    <div className="flex justify-end">
                      <button
                        type="submit"
                        className="inline-flex items-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-blue-500 hover:bg-blue-600 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
                        disabled={!record.isMutable || record.isMutating}
                      >
                        {record.isMutating ? "Updating..." : "Update Profile"}
                      </button>
                    </div>
                  </div>
                </form>
              </div>
            </div>
          </div>

          {connection.status === "connected" && record && record.content ? (
            <div className="max-w-3xl mx-auto mt-8 sm:px-6 lg:px-8">
              <div className="bg-white overflow-hidden shadow sm:rounded-lg">
                <div className="px-4 py-5 sm:p-6">
                  <h2 className="text-lg font-medium text-gray-900 leading-6">
                    Your Profile
                  </h2>
                  <div className="mt-3 max-w-xl text-sm text-gray-500 grid grid-cols-2 gap-4">
                    <div className="flex flex-col">
                      <label className="text-gray-700 font-bold" htmlFor="name">
                        Name:
                      </label>
                      <p className="mb-1">{record.content.name}</p>
                    </div>
                    <div className="flex flex-col">
                      <label
                        className="text-gray-700 font-bold"
                        htmlFor="username"
                      >
                        Username:
                      </label>
                      <p className="mb-1">{record.content.username}</p>
                    </div>
                    <div className="col-span-2">
                      <label className="text-gray-700 font-bold" htmlFor="bio">
                        DID:
                      </label>
                      <p className="whitespace-pre-wrap mb-1">
                        {connection.selfID.id}
                      </p>
                    </div>
                    <div className="col-span-2">
                      <label className="text-gray-700 font-bold" htmlFor="bio">
                        Bio:
                      </label>
                      <p className="whitespace-pre-wrap mb-1">
                        {record.content.bio}
                      </p>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          ) : record &&
            !record.content &&
            !record.isLoading &&
            connection &&
            connection.status === "connected" ? (
            <div className="max-w-3xl mx-auto mt-8 sm:px-6 lg:px-8">
              <div className="bg-white overflow-hidden shadow sm:rounded-lg">
                <div className="px-4 py-5 sm:p-6">
                  <h2 className="text-lg font-medium text-gray-900 leading-6">
                    Profile Information
                  </h2>
                  <div className="mt-3 max-w-xl text-sm text-gray-500">
                    <p>
                      You don&apos;t have a profile yet. Create one by filling
                      out the form above.
                    </p>
                  </div>
                </div>
              </div>
            </div>
          ) : null}
          <Toaster
            position="top-center"
            reverseOrder={false}
            toastOptions={{ duration: 4000 }}
          />
        </main>
      </div>
    </>
  );
}
